String Operations in Python 

1. Find the length of the string 
str="HELLO WORLD"
len(str)

2. Slice the string as per your choice
print (str[1:2]) 

3. Concatenate two strings 
str2=" Welcome"
print(str1 + str2)

4. Convert in to lower case in to uppercase character 
str1.upper()
print(str1)

5. Convert upper case into lower case characters
str1=str1.lower()
print(str1)

6. convert the character into Unicode ( Ascii values)
 for i in str1:
    print(ord(i))

7. convert Unicode into character 

uni=82
print(chr(uni))

8. Check whether the given "substring" exists in the string

sub="hell"

if sub in str1:
    print("True")
else:
    print("False")

9. Replace the character 'k' with 'h'

str = "Ken"
str_replaced = str.replace('k', 'h')
print(str_replaced)

10. Pad the string with "x" at the end
str_padded = str.ljust(15, 'x')
print(str_padded)

11. remove leading and trailing whitespace or specified characters from the string

str1 = "    Hello World   "
strp = str1.strip()
print(strp)

12. split the given string in to group of five characters

string = "ABCDEFGHIJKLM"
groups = [string[i:i+5] for i in range(0, len(string), 5)]
print(groups)

13. count total number of words 

strc='Count the words'
len(strc)

14. Find the frequency of each characters in the string 

from collections import Counter
strfq = "aaabbbccc"
char_freq = Counter(strfq)
print("char_freq: ", char_freq)

STDIN and File operators 

15. get the file name from the user 

Name= input("Enter file Name")

16. check the file exist or not 

file = input("Enter the file path: ")
path = Path(file_path)

if path.is_file():
    print(f"The file '{file_path}' exists.")
else:
    print(f"The file '{file_path}' does not exist.")

Looping and File handling 

17. read the contents from the file 

  with open(file_name, 'r') as file:
        contents = file.read()
        print("File contents:\n", contents)
except FileNotFoundError:
    print("File not found.")

18. reverse the contents from the file
   
with open(file_name, 'r') as file:
        contents = file.read()
        reversed_contents = contents[::-1]
        print("Reversed contents:\n", reversed_contents)
except FileNotFoundError:
    print("File not found.")

19. Write into the file 

text_to_write = "TEXT"
with open(file_name, 'w') as file:
    file.write(text_to_write)
print("Text writte in file.")

Math operations 
20. convert Frequency in to percentage (continuation of 12th Question) 
from collections import Counter
strfq = "aaabbbccc"
char_freq = Counter(strfq)
print("char_freq: ", char_freq)


21. Perform modular arithmetic operation 

a = 17
b = 5
remainder = a % b
print(f"The remainder of {a} divided by {b} is {remainder}")

22. Find the prime numbers 
    check the given number is prime or not 
    print the prime numbers with the given range 

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_numbers_in_range(start, end):
    return [n for n in range(start, end + 1) if is_prime(n)]

number_to_check = 8
print(f"{number_to_check} is prime: ", is_prime(number_to_check))
print("Prime numbers in range 1 to 20: ", prime_numbers_in_range(1, 50))

23. Check the given two numbers are co prime or not 

def are_coprime(num1,num2):
    while num2:
        num1, num2 = num2, num1 % num2
    return num1 == 1

num1 = 25
num2 = 22
if are_coprime(num1, num2):
    print(f"{num1} and {num2} are co-prime.")
else:
    print(f"{num1} and {num2} are not co-prime.")

24. find the factors for the given number ( can use python library)

def find_factors(n):
    return [i for i in range(1, n + 1) if n % i == 0]

num = 30
result = find_factors(num)
print(f"The factors of {num} are: {result}")

25. generate 10 random numbers 

import random
num_list = random.sample(range(0, 500), 10)
print(num_list)

26. Explore : Miller-Rabin Test (pen paper method)

def miller_rabin(n, k=5):
    if n <= 1 or n == 4:
        return False
    if n <= 3:
        return True

    d = n - 1
    r = 0
    while d % 2 == 0:
        d //= 2
        r += 1

    def check(a):
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            return True
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                return True
        return False

    for _ in range(k):
        a = random.randint(2, n - 2)
        if not check(a):
            return False
    return True

number_to_test = 37
print(f"{number_to_test} ", miller_rabin(number_to_test))
